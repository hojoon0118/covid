knitr::opts_chunk$set(echo = TRUE)
#install.packages(c("janitor"))
knitr::opts_chunk$set(echo = TRUE)
#install.packages(c("janitor"))
library("knitr")
library("janitor")
library("tidyverse")
set.seed(1)
df.covid <- read.csv(file = 'data/transformed_data.csv', fileEncoding="UTF-8-BOM")
library("knitr")
library("janitor")
library("tidyverse")
library("DT")
set.seed(1)
df.covid <- read.csv(file = 'data/transformed_data.csv', fileEncoding="UTF-8-BOM")
install.packages("devtools")
devtools::install_github("daattali/ggExtra")
install.packages("devtools")
devtools::install_github("daattali/ggExtra")
update.packages ()
# this will update all your packages
install.packages ("tidyverse")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages(c("skimr", "visdat", "summarytools", "DT"))
install.packages("devtools")
#Libaries
library("knitr")
library("tidyverse")
library("DT")
# Example
# bach_data <- bachelorette
df.covid <- read.csv(file = 'data/transformed_data.csv', fileEncoding="UTF-8-BOM")
glimpse(df.covid)%>% head(10)
head(df.covid)
df.covid %>%
distinct(COUNTRY) %>% head(10)
df.covid %>%
count(COUNTRY) %>% head(10)
df.covid %>%
count(COUNTRY,DATE) %>% head(10)
install.packages(htmltools)
install.packages("CosmoPhotoz")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
update.packages ()
# this will update all your packages
#install.packages ("tidyverse")
update.packages ()
# this will update all your packages
install.packages ("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
#Libaries
library("knitr")
library("tidyverse")
library("DT")
library("ggplot2")
library("ggExtra")
library("patchwork")# for making figure panels
#library("report")
# Example
# bach_data <- bachelorette
df.covid <- read.csv(file = 'data/transformed_data.csv', fileEncoding="UTF-8-BOM")
df.covid %>%
visdat::vis_dat()
df.covid <- df.covid[ ,-1]
df.covid <- df.covid %>% mutate(TCPOP = TC/POP,
TDPOP = TD/POP)
df.covid <- df.covid %>% filter(GDPCAP>0, STI>0, HDI>0, POP>0, TC>=0, TD>=0)
df.lastdate <- df.covid %>%
group_by(COUNTRY) %>%
slice(which.max(as.Date(DATE)))
df.lastdate$GDPCAP%>%min()
df.lastdate %>% head(10)
p1 <- df.lastdate %>%
ggplot( aes(x=POP)) +
geom_histogram( binwidth=0.5, fill="#42e0f5", color="#e9ecef", alpha=0.9)
p2 <- df.lastdate %>%
ggplot( aes(x=HDI)) +
geom_histogram( binwidth=0.1, fill="#42e0f5", color="#e9ecef", alpha=0.9)
p3 <- df.lastdate %>%
ggplot( aes(x=TC)) +
geom_histogram( binwidth=0.5, fill="#42e0f5", color="#e9ecef", alpha=0.9)
p4 <- df.lastdate %>%
ggplot( aes(x=TD)) +
geom_histogram( binwidth=0.5, fill="#42e0f5", color="#e9ecef", alpha=0.9)
p5 <- df.lastdate %>%
ggplot( aes(x=STI)) +
geom_histogram( binwidth=0.1, fill="#42e0f5", color="#e9ecef", alpha=0.9)
p6 <- df.lastdate %>%
ggplot( aes(x=GDPCAP)) +
geom_histogram( binwidth=0.3, fill="#42e0f5", color="#e9ecef", alpha=0.9)
# ggtitle("GDPCAP histogram")
# theme(
#   plot.title = element_text(size=20), panel.background = element_blank(), axis.line = element_line(colour = "grey")
# )
p1 + p2 +p3 + p4 + p5 + p6
plot_layout(ncol=1) &
theme_classic() &
theme(
plot.title = element_text(size=20), panel.background = element_blank(), axis.line = element_line(colour = "grey")
)
fit = lm(TDPOP ~ GDPCAP+TCPOP+HDI+POP, data = df.lastdate)
HGa <- aov(fit) %>% summary()
HGa
fit = lm(TDPOP ~ GDPCAP+HDI+POP, data = df.lastdate)
HGB <- aov(fit) %>% summary()
HGB
fit = lm(TCPOP ~ GDPCAP+HDI+POP, data = df.lastdate)
HGC <- aov(fit) %>% summary()
fit
HGC
#head(df.covid)
# classic plot :
p1 <- ggplot(df.lastdate, aes(x=GDPCAP, y=HDI, color = "#42e0f5", size=1)) +
geom_point(alpha = 1, size = 1) +
geom_smooth(method = "lm", se = T, color = "blue", fill="black", size = 1) +
theme_classic()+
theme(legend.position ="none")
# classic plot :
p2 <- ggplot(df.lastdate, aes(x=TC, y=TD, color = "#42e0f5", size=1)) +
geom_point(alpha = 1, size = 1) +
geom_smooth(method = "lm", se = T, color = "blue", fill="black", size = 1) +
theme_classic()+
theme(legend.position ="none")
p3 <- ggplot(df.lastdate, aes(x=GDPCAP, y=TCPOP, color = "#42e0f5")) +
geom_point(alpha = 1, size = 1) +
geom_smooth(method = "lm", se = T, color = "blue", fill="black", size = 1) +
theme_classic()+
theme(legend.position = "none")
p4 <- ggplot(df.lastdate, aes(x=GDPCAP, y=TDPOP, color = "#42e0f5")) +
geom_point(alpha = 1, size = 1) +
geom_smooth(method = "lm", se = T, color = "blue", fill="black", size = 1) +
theme_classic()+
theme(legend.position = "none")
p1 + p2 + p3 +p4
plot_layout(ncol=1) &
theme(
plot.title = element_text(size=20), panel.background = element_blank(), axis.line = element_line(colour = "grey")
)
c1 <- cor.test(df.lastdate$GDPCAP,df.lastdate$HDI)
c2 <- cor.test(df.lastdate$TC, df.lastdate$TD)
c3 <- cor.test(df.lastdate$GDPCAP,df.lastdate$TCPOP)
fit = lm(HDI ~ 1 + GDPCAP, data = df.lastdate)
HGsum <- aov(fit) %>% summary()
fit = lm(TC ~ 1 + TD, data = df.lastdate)
CDsum <- aov(fit)%>%summary()
fit = lm(TCPOP ~ 1 + GDPCAP, data = df.lastdate)
CGsum <- aov(fit)%>%summary()
HGsum
CDsum
CGsum
test1<-cor.test(df.covid$TC,df.covid$TD)
test2<-cor.test(df.covid$GDPCAP,df.covid$HDI)
test1
df.covid <- df.covid%>%filter(TC>0, GDPCAP>0)
# classic plot :
p <- ggplot(df.covid, aes(x=GDPCAP, y=TC, color = "#42e0f5", size=1)) +
geom_point() +
theme(legend.position="none")
# Set relative size of marginal plots (main plot 10x bigger than marginals)
p1 <- ggMarginal(p, type="histogram", size=5)
p1
df.covid1 <- df.covid%>% filter(GDPCAP>0)
p <- ggplot(df.covid1, aes(x=GDPCAP, y=TC, color = "#42e0f5", size=1)) +
geom_point() +
theme(legend.position="none")
p
p <- ggMarginal(p, type="histogram", size=5)
p
cor.test(df.covid$TC, df.covid$GDPCAP)
fit = lm(TC ~ 1 + GDPCAP, data = df.covid1)
fit%>%summary()
df.covidgdp <- df.covid %>% filter(GDPCAP>0)
fit = lm(TC ~ 1 + GDPCAP, data = df.covidgdp)
fit%>%summary()
p <- ggplot(df.covidgdp, aes(x=POP, y=GDPCAP, color = "#42e0f5")) +
geom_point(alpha = 0.3, size = 0.1) +
geom_smooth(method = "lm", se = T, color = "blue", fill="black", size = 1) +
theme_bw()
p
df.covidgf <- df.covid %>% filter(GDPCAP>0)
fit = lm(TD ~ 1 + GDPCAP, data = df.covidgf)
fit%>%summary()
p <- ggplot(df.covidgf, aes(x=GDPCAP, y=TD, color = "#42e0f5")) +
geom_point(alpha = 0.3, size = 0.1) +
geom_smooth(method = "lm", se = T, color = "blue", fill="black", size = 1) +
theme_bw()
p
p <- ggplot(df.covid, aes(x=POP, y=TC, color = "#42e0f5", size=1)) +
geom_point() +
theme(legend.position="none")
# Set relative size of marginal plots (main plot 10x bigger than marginals)
p1 <- ggMarginal(p, type="histogram", size=5)
# Custom marginal plots:
#p2 <- ggMarginal(p, type="histogram", fill = "slateblue", xparams = list(  bins=10))
# Show only marginal plot for x axis
#p3 <- ggMarginal(p, margins = 'x', color="purple", size=4)
p1
fit = lm(TC ~ 1 + POP, data = df.covid)
fit%>%summary()
df.covidsf <- df.covid%>% filter(STI>0)
p <- ggplot(df.covidsf, aes(x=STI, y=TC, color = "#42e0f5", size=1)) +
geom_point() +
theme(legend.position="none")
# Set relative size of marginal plots (main plot 10x bigger than marginals)
p1 <- ggMarginal(p, type="histogram", size=5)
# Custom marginal plots:
#p2 <- ggMarginal(p, type="histogram", fill = "slateblue", xparams = list(  bins=10))
# Show only marginal plot for x axis
#p3 <- ggMarginal(p, margins = 'x', color="purple", size=4)
p1
cor.test(df.covid$STI, df.covid$TC)
fit = lm(TC ~ 1 + STI, data = df.covid)
fit%>%summary()
fit = lm(TC ~ 1 +STI, data = df.covidsf)
fit%>%summary()
p <- ggplot(df.covid, aes(x=STI, y=TC, color = "#42e0f5")) +
geom_point(alpha = 0.3, size = 0.1) +
geom_smooth(method = "lm", se = T, color = "blue", fill="black", size = 1) +
theme_bw()
p
df.covidsgf <- df.covid%>% filter(GDPCAP>0)
p <- ggplot(df.covidsgf, aes(x=STI, y=GDPCAP, color = "#42e0f5", size=1)) +
geom_point() +
theme(legend.position="none")
# Set relative size of marginal plots (main plot 10x bigger than marginals)
p1 <- ggMarginal(p, type="histogram", size=5)
# Custom marginal plots:
#p2 <- ggMarginal(p, type="histogram", fill = "slateblue", xparams = list(  bins=10))
# Show only marginal plot for x axis
#p3 <- ggMarginal(p, margins = 'x', color="purple", size=4)
p1
cor.test(df.covid$STI, df.covid$GDPCAP)
fit = lm(TC ~ 1 + STI, data = df.covid)
fit%>%summary()
fit = lm(TC ~ 1 + STI, data = df.covidsgf)
fit%>%summary()
p <- ggplot(df.covidsgf, aes(x=STI, y=TC, color = "#42e0f5")) +
geom_point(alpha = 0.3, size = 0.1) +
geom_smooth(method = "lm", se = T, color = "blue", fill="black", size = 1) +
theme_bw()
p
fit = lm(TC ~ 1 + GDPCAP, data = df.covidsgf)
fit%>%summary()
p <- ggplot(df.covidsgf, aes(x=STI, y=GDPCAP, color = "#42e0f5")) +
geom_point(alpha = 0.3, size = 0.1) +
geom_smooth(method = "lm", se = T, color = "blue", fill="black", size = 1) +
theme_bw()
p
df.covidstf <- df.covid%>% filter(STI>0)
p <- ggplot(df.covidstf, aes(x=STI, y=TD, color = "#42e0f5", size=1)) +
geom_point() +
theme(legend.position="none")
# Set relative size of marginal plots (main plot 10x bigger than marginals)
p1 <- ggMarginal(p, type="histogram", size=5)
# Custom marginal plots:
#p2 <- ggMarginal(p, type="histogram", fill = "slateblue", xparams = list(  bins=10))
# Show only marginal plot for x axis
#p3 <- ggMarginal(p, margins = 'x', color="purple", size=4)
p1
cor.test(df.covid$STI, df.covid$TD)
fit = lm(TC ~ 1 + GDPCAP, data = df.covidsgf)
fit%>%summary()
p <- ggplot(df.covidsgf, aes(x=STI, y=TD, color = "#42e0f5")) +
geom_point(alpha = 0.3, size = 0.1) +
geom_smooth(method = "lm", se = T, color = "blue", fill="black", size = 1) +
theme_bw()
p
#install.packages(c("skimr", "visdat", "summarytools", "DT"))
#install.packages("devtools")
#devtools::install_github("daattali/ggExtra")
#install.packages("report")
#install.packages("bestNormalize")
#install.packages(c("skimr", "visdat", "summarytools", "DT"))
#install.packages("devtools")
#devtools::install_github("daattali/ggExtra")
#install.packages("report")
install.packages("bestNormalize")
